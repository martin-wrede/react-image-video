// functions/ai-claude.js - WITH ADDED DEBUGGING
// today: 2025/07/14

export async function onRequest(context) {
  const { request, env } = context;

  // --- START OF NEW DEBUGGING CODE ---
  // This code will run immediately and check the environment.
  console.log('Worker is running. Inspecting environment...');
  if (!env || Object.keys(env).length === 0) {
      // If 'env' is empty, no bindings are attached at all.
      throw new Error('FATAL: The `env` object is empty. No bindings (R2 or secrets) are attached to this function. Check the Cloudflare Pages dashboard.');
  }

  console.log('Available environment keys:', Object.keys(env));
  
  // Specifically check for the R2 binding we need.
  if (!env.IMAGE_BUCKET) {
      // This will now be the specific error message you see if the binding is wrong.
      throw new Error('FATAL: `env.IMAGE_BUCKET` is not defined. The R2 bucket binding name is incorrect or missing in the dashboard settings.');
  }
   // --- END OF NEW DEBUGGING CODE ---


  // Handle CORS Preflight request
  if (request.method === 'OPTIONS') {
    return new Response(null, {
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type',
      }
    });
  }

  if (request.method !== 'POST') {
    return new Response('Method not allowed', { status: 405 });
  }

  try {
    const contentType = request.headers.get('content-type') || '';

    if (contentType.includes('multipart/form-data')) {
      const formData = await request.formData();
      const prompt = formData.get('prompt');
      const imageFile = formData.get('image');

      if (!prompt || !imageFile) {
        throw new Error('FormData is missing the required "prompt" or "image" field.');
      }
      
      const key = `uploads/${Date.now()}-${imageFile.name}`;
      
      // The code will now only crash here if the binding exists but something else is wrong
      await env.IMAGE_BUCKET.put(key, imageFile.stream(), {
        httpMetadata: { contentType: imageFile.type },
      });

      const publicBucketUrl = env.IMAGE_BUCKET.publicUrl;
      const imageUrlForRunway = `${publicBucketUrl}/${key}`;

      // ... The rest of your code for calling RunwayML ...
      const response = await fetch('https://api.runwayml.com/v1/image_to_video', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${env.RUNWAYML_API_KEY}`,
          'X-Runway-Version': '2024-09-13', 
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            model: 'gen3a_turbo',
            promptText: prompt,
            promptImage: imageUrlForRunway,
        }),
      });

       const data = await response.json();
       if (!response.ok) throw new Error(`Runway API Error: ${JSON.stringify(data)}`);

       return new Response(JSON.stringify({ success: true, taskId: data.id, status: data.status }), {
        headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' }
      });
    } 
    else if (contentType.includes('application/json')) {
      // ... your status check logic ...
    }
    else {
      throw new Error(`Invalid request Content-Type.`);
    }

  } catch (error) {
    console.error('Error in Cloudflare Worker:', error.message);
    return new Response(JSON.stringify({
      success: false,
      error: error.message
    }), {
      status: 500,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      }
    });
  }
}